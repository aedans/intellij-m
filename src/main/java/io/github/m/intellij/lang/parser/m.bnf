{
  parserClass="io.github.m.intellij.lang.parser.MParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="M"
  psiImplClassSuffix="Impl"
  psiPackage="io.github.m.intellij.lang.psi"
  psiImplPackage="io.github.m.intellij.lang.psi.impl"
  psiImplUtilClass="io.github.m.intellij.lang.psi.MPsiImplUtil"

  elementTypeHolderClass="io.github.m.intellij.lang.lexer.MTokenTypes"
  elementTypeClass="io.github.m.intellij.lang.lexer.MElementType"
  tokenTypeClass="io.github.m.intellij.lang.lexer.MTokenType"
}

file ::= (whitespace* block_expr)* whitespace*

block_expr ::= operation_expr ((nosspace* operation_expr)* sstatement_break (sindent (nosspace* block_expr)* sdedent)?)?
operation_expr ::= apply_expr (whitespace* OPERATOR whitespace* operation_expr)?
apply_expr ::= (paren_expr | brace_expr | bracket_expr) (OPEN_PAREN (whitespace* args COMMA?)* whitespace* CLOSE_PAREN)*

paren_expr ::= OPEN_PAREN whitespace* (args | OPERATOR)? whitespace* CLOSE_PAREN | atom
brace_expr ::= OPEN_BRACE whitespace* (list | OPERATOR)? whitespace* CLOSE_BRACE | atom
bracket_expr ::= OPEN_BRACKET whitespace* (list | OPERATOR)? whitespace* CLOSE_BRACKET | atom

atom ::= IDENTIFIER | STRING | NUMBER

args ::= (operation_expr whitespace*)+ whitespace*
list ::= (operation_expr whitespace*)+ whitespace*

sindent ::= nosspace* INDENT
sdedent ::= nosspace* DEDENT
sstatement_break ::= nosspace* STATEMENT_BREAK

whitespace ::= sspace | nosspace
nosspace ::= SPACE | TAB | NEWLINE
sspace ::= STATEMENT_BREAK | INDENT | DEDENT
