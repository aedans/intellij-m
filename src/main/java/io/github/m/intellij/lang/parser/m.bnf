{
  parserClass="io.github.m.intellij.lang.parser.MParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="M"
  psiImplClassSuffix="Impl"
  psiPackage="io.github.m.intellij.lang.psi"
  psiImplPackage="io.github.m.intellij.lang.psi.impl"
  psiImplUtilClass="io.github.m.intellij.lang.psi.MPsiImplUtil"

  elementTypeHolderClass="io.github.m.intellij.lang.lexer.MTokenTypes"
  elementTypeClass="io.github.m.intellij.lang.lexer.MElementType"
  tokenTypeClass="io.github.m.intellij.lang.lexer.MTokenType"
}

file ::= (whitespace* indent_expr)* whitespace*

indent_expr ::= expr+ sstatement_break (sindent (indent_expr+ | sstatement_break)* sdedent)?
              | expr

expr ::= nosspace* atomic_expr apply_args*

atomic_expr ::= paren_expr | brace_expr | bracket_expr | atom

paren_expr ::= OPEN_PAREN paren_args? CLOSE_PAREN
brace_expr ::= OPEN_BRACE brace_args? CLOSE_BRACE
bracket_expr ::= OPEN_BRACKET bracket_args? CLOSE_BRACKET

paren_args ::= (whitespace* expr)+ whitespace*
brace_args ::= (whitespace* expr)+ whitespace*
bracket_args ::= (whitespace* expr)+ whitespace*

apply_args ::= apply_paren_args | apply_brace_args | apply_bracket_args
apply_paren_args ::= OPEN_PAREN (paren_args COMMA?)* whitespace* CLOSE_PAREN
apply_brace_args ::= OPEN_BRACE (brace_args COMMA?)* whitespace* CLOSE_BRACE
apply_bracket_args ::= OPEN_BRACKET (bracket_args COMMA?)* whitespace* CLOSE_BRACKET

atom ::= IDENTIFIER | STRING | NUMBER

sindent ::= nosspace* INDENT
sdedent ::= nosspace* DEDENT
sstatement_break ::= nosspace* STATEMENT_BREAK

whitespace ::= sspace | nosspace
nosspace ::= SPACE | TAB | NEWLINE
sspace ::= STATEMENT_BREAK | INDENT | DEDENT
